x-default-resources: &default-resources
  # deploy:
  #   resources:
  #     limits:
  #       cpus: '1'
  #       memory: 256M
  #     reservations:
  #       cpus: '0.5'
  #       memory: 120M
  restart: no
  networks:
    - network
services:
  server:
    <<: *default-resources 
    container_name: ${CONTAINER_PREFIX}_server
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    ports:
      - 8081:8080

  db:
    <<: *default-resources 
    image: postgres:16-alpine
    container_name: ${CONTAINER_PREFIX}_postgres
    ports:
      - ${POSTGRES_PORT}:5443
    environment:
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DB} -t 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 10s
 
  nginx:
    <<: *default-resources 
    build:
      context: ./nginx-proxy-manager
      dockerfile: Dockerfile
    container_name: ${CONTAINER_PREFIX}_nginx_proxy_manager
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - npm_data:/data
      - npm_data_letsencrypt:/etc/letsencrypt
      - ./nginx-proxy-manager/logs:/data/logs
      - ./nginx-proxy-manager/custom/http_top.conf:/data/nginx/custom/http_top.conf
      - ./nginx-proxy-manager/scripts/lua:/app/scripts/lua
      - ./nginx-proxy-manager/root/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-proxy-manager/proxy-host/api.conf:/data/nginx/proxy_host/api.conf
      - ./nginx-proxy-manager/proxy-host/wildcard-subdomain.conf:/data/nginx/proxy_host/wildcard-subdomain.conf
    ports:
      - "80:80"
      - "81:81"
      - "443:443"


  redis:
    <<: *default-resources 
    container_name: ${CONTAINER_PREFIX}_redis
    image: redis:7.2.6-alpine
    ports:
      - ${REDIS_PORT}:6377
    volumes:
      - ./redis/data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command:
      [
        "redis-server",
        "/usr/local/etc/redis/redis.conf",
      ]

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    # environment:
    #   - REDIS_REPLICATION_MODE=master

  #   # Redis Replica 1
  # redis-replica-1:
  #   <<: *default-resources 
  #   container_name: ${CONTAINER_PREFIX}_redis_replica_1
  #   image: redis:7.2.6-alpine
  #   depends_on:
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 5s
  #   command: ["redis-server", "--replicaof", "redis", "6377"]
  #   environment:
  #     - REDIS_REPLICATION_MODE=replica

  #   # Redis Replica 2 (Optional for additional load)
  # redis-replica-2:
  #   container_name: ${CONTAINER_PREFIX}_redis_replica_2
  #   image: redis:7.2.6-alpine
  #   depends_on:
  #     - redis
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 5s
  #   command: ["redis-server", "--replicaof", "redis", "6377"]
  #   environment:
  #     - REDIS_REPLICATION_MODE=replica
networks:
  network:
    name: ${CONTAINER_PREFIX}
    driver: bridge
volumes:
  npm_data:
    name: ${CONTAINER_PREFIX}_nginx_proxy_manager
  npm_data_letsencrypt:
    name: ${CONTAINER_PREFIX}_npm_data_letsencrypt
  minio-data:
    name: ${CONTAINER_PREFIX}_minio
  redis-data:
    name: ${CONTAINER_PREFIX}_redis
  pg_data:
    name: ${CONTAINER_PREFIX}_postgres
 